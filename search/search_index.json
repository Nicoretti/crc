{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"CRC <p>  Calculate CRC checksums, verify CRC checksum, predefined CRC configurations, custom CRC configurations </p> <p> </p> <ul> <li> Documentation: https://nicoretti.github.io/crc</li> <li> Source Code: https://github.com/Nicoretti/crc</li> </ul>"},{"location":"#available-crc-configurations","title":"Available CRC Configurations","text":"<p>The library includes a variety of common CRC configurations for convenience. To explore the full range of available CRC configurations, please checkout the configurations section of the documentation. If you need a new configuration to be readily available, consider submitting a PR or raising an issue.</p>"},{"location":"#custom-configurations","title":"Custom Configurations","text":"<p>If you want to create a custom configuration, you should have the following information available:</p> <ul> <li>width</li> <li>polynom</li> <li>init value</li> <li>final xor value</li> <li>reversed input</li> <li>reversed output</li> </ul> <p>In case you only have a name of a specific crc configuration/algorithm and you are unsure what are the specific parameters of it, a look into this  crc-catalogue might help.</p> Note <p>This library currently only supports bit widths of full bytes 8, 16, 24, 32, ...</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>&gt;=  Python 3.8</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install crc\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#create-a-calculator","title":"Create a Calculator","text":"Pre defined configurationCustom configuration <pre><code>from crc import Calculator, Crc8\n\ncalculator = Calculator(Crc8.CCITT)\n</code></pre> <pre><code>from crc import Calculator, Configuration\n\nconfig = Configuration(\n    width=8,\n    poly=0x07,\n    init_value=0x00,\n    final_xor_value=0x00,\n    reverse_input=False,\n    reverse_output=False,\n)\n\ncalculator = Calculator(config)\n</code></pre>"},{"location":"#calculate-a-checksum","title":"Calculate a checksum","text":"StandardOptimized for speed <pre><code>from crc import Calculator, Crc8\n\nexpected = 0xBC\ndata = bytes([0, 1, 2, 3, 4, 5])\ncalculator = Calculator(Crc8.CCITT)\n\nassert expected == calculator.checksum(data)\n</code></pre> <pre><code>from crc import Calculator, Crc8\n\nexpected = 0xBC\ndata = bytes([0, 1, 2, 3, 4, 5])\ncalculator = Calculator(Crc8.CCITT, optimized=True)\n\nassert expected == calculator.checksum(data)\n</code></pre>"},{"location":"#verify-a-checksum","title":"Verify a checksum","text":"StandardOptimized for speed <pre><code>from crc import Calculator, Crc8\n\nexpected = 0xBC\ndata = bytes([0, 1, 2, 3, 4, 5])\ncalculator = Calculator(Crc8.CCITT)\n\nassert calculator.verify(data, expected)\n</code></pre> <pre><code>from crc import Calculator, Crc8\n\nexpected = 0xBC\ndata = bytes([0, 1, 2, 3, 4, 5])\ncalculator = Calculator(Crc8.CCITT, optimized=True)\n\nassert calculator.verify(data, expected)\n</code></pre>"},{"location":"#supported-data-types","title":"Supported data types","text":"intbytesbytearrayFileByteIoIterable of bytesByte convertibles <pre><code>from crc import Calculator, Crc8\n\nexpected = 0x20\ndata = 97\ncalculator = Calculator(Crc8.CCITT, optimized=True)\n\nassert calculator.checksum(data) == expected\n</code></pre> <pre><code>from crc import Calculator, Crc8\n\nexpected = 0xF4\ndata = b\"123456789\"\ncalculator = Calculator(Crc8.CCITT, optimized=True)\n\nassert calculator.checksum(data) == expected\n</code></pre> <pre><code>from crc import Calculator, Crc8\n\nexpected = 0xF4\ndata = bytearray(b\"123456789\")\ncalculator = Calculator(Crc8.CCITT, optimized=True)\n\nassert calculator.checksum(data) == expected\n</code></pre> <pre><code>from crc import Calculator, Crc8\n\nexpected = 0xF4\ncalculator = Calculator(Crc8.CCITT, optimized=True)\n\nwith open(\"afile.txt\", \"rb\") as f:\n    assert calculator.checksum(f) == expected\n</code></pre> <pre><code>import io\n\nfrom crc import Calculator, Crc8\n\nexpected = 0xF4\ndata = io.ByteIo(b\"123456789\")\ncalculator = Calculator(Crc8.CCITT, optimized=True)\n\nassert calculator.checksum(data) == expected\n</code></pre> <pre><code>from crc import Calculator, Crc8\n\nexpected = 0xF4\ncalculator = Calculator(Crc8.CCITT, optimized=True)\ndata = (data for data in [b\"12\", b\"34\", b\"56\", b\"78\", b\"9\"])\n\nassert calculator.checksum(data) == expected\n</code></pre> <pre><code>from crc import Calculator, Crc8\n\n\nclass ByteConvertible:\n    def __init__(self, data):\n        self._data = data\n\n    def __bytes__(self):\n        return self._data.encode(\"utf-8\")\n\n\nexpected = 0xF4\ncalculator = Calculator(Crc8.CCITT, optimized=True)\ndata = ByteConvertible(\"123456789\")\n\nassert calculator.checksum(bytes(data)) == expected\n</code></pre>"},{"location":"#calculate-a-checksum-with-raw-registers","title":"Calculate a checksum with raw registers","text":"RegisterTableBasedRegister <pre><code>from crc import Crc8, Register\n\nexpected = 0xBC\ndata = bytes([0, 1, 2, 3, 4, 5])\nregister = Register(Crc8.CCITT)\n\nregister.init()\nregister.update(data)\nassert expected == register.digest()\n</code></pre> <pre><code>from crc import Crc8, TableBasedRegister\n\nexpected = 0xBC\ndata = bytes([0, 1, 2, 3, 4, 5])\nregister = TableBasedRegister(Crc8.CCITT)\n\nregister.init()\nregister.update(data)\nassert expected == register.digest()\n</code></pre>"},{"location":"#references-resources","title":"References &amp; Resources","text":"<ul> <li>A Painless guide to crc error detection algorithms</li> <li>CRC-Catalogue</li> </ul>"},{"location":"cli/","title":"CLI Tools","text":"<p>The crc library comes with a small command line tool which can generate crc lookup tables if needed.</p> <pre><code>usage: crc table [-h] &lt;width&gt; &lt;polynomial&gt;\n\npositional arguments:\n  &lt;width&gt;       width of the crc algorithm, common width's are 8, 16, 32, 64\n  &lt;polynomial&gt;  hex value of the polynomial used for calculating the crc table\n\noptional arguments:\n  -h, --help    show this help message and exit\n</code></pre> <p>Example Usage:</p> <pre><code>user@host ~$ crc table 8 0x7D\n</code></pre>"},{"location":"configurations/","title":"Configurations","text":""},{"location":"configurations/#crc8","title":"Crc8","text":"CCITTSAEJ1850SAEJ1850_ZEROAUTOSARBLUETOOTHMAXIM_DOW <ul> <li>Width: 8</li> <li>Final Xor: 0x00</li> <li>Init Value: 0x00</li> <li>Rev Input: 0x00</li> <li>Polynomial: 0x07</li> <li>Rev Output: 0x00</li> </ul> <ul> <li>Width: 8</li> <li>Final Xor: 0xFF</li> <li>Init Value: 0xFF</li> <li>Rev Input: 0x00</li> <li>Polynomial: 0x1D</li> <li>Rev Output: 0x00</li> </ul> <ul> <li>Width: 8</li> <li>Final Xor: 0x00</li> <li>Init Value: 0x00</li> <li>Rev Input: 0x00</li> <li>Polynomial: 0x1D</li> <li>Rev Output: 0x00</li> </ul> <ul> <li>Width: 8</li> <li>Final Xor: 0xFF</li> <li>Init Value: 0xFF</li> <li>Rev Input: 0x00</li> <li>Polynomial: 0x2F</li> <li>Rev Output: 0x00</li> </ul> <ul> <li>Width: 8</li> <li>Final Xor: 0x00</li> <li>Init Value: 0x00</li> <li>Rev Input: 0x01</li> <li>Polynomial: 0xA7</li> <li>Rev Output: 0x01</li> </ul> <ul> <li>Width: 8</li> <li>Final Xor: 0x00</li> <li>Init Value: 0x00</li> <li>Rev Input: 0x01</li> <li>Polynomial: 0x31</li> <li>Rev Output: 0x01</li> </ul>"},{"location":"configurations/#crc16","title":"Crc16","text":"CCITTGSMPROFIBUSMODBUSIBM_3740 <ul> <li>Width: 16</li> <li>Final Xor: 0x0000</li> <li>Init Value: 0x0000</li> <li>Rev Input: 0x0000</li> <li>Polynomial: 0x1021</li> <li>Rev Output: 0x0000</li> </ul> <ul> <li>Width: 16</li> <li>Final Xor: 0xFFFF</li> <li>Init Value: 0x0000</li> <li>Rev Input: 0x0000</li> <li>Polynomial: 0x1021</li> <li>Rev Output: 0x0000</li> </ul> <ul> <li>Width: 16</li> <li>Final Xor: 0xFFFF</li> <li>Init Value: 0xFFFF</li> <li>Rev Input: 0x0000</li> <li>Polynomial: 0x1DCF</li> <li>Rev Output: 0x0000</li> </ul> <ul> <li>Width: 16</li> <li>Final Xor: 0x0000</li> <li>Init Value: 0xFFFF</li> <li>Rev Input: 0x0001</li> <li>Polynomial: 0x8005</li> <li>Rev Output: 0x0001</li> </ul> <ul> <li>Width: 16</li> <li>Final Xor: 0x0000</li> <li>Init Value: 0xFFFF</li> <li>Rev Input: 0x0000</li> <li>Polynomial: 0x1021</li> <li>Rev Output: 0x0000</li> </ul>"},{"location":"configurations/#crc32","title":"Crc32","text":"CRC32AUTOSARBZIP2POSIX <ul> <li>Width: 32</li> <li>Final Xor: 0xFFFFFFFF</li> <li>Init Value: 0xFFFFFFFF</li> <li>Rev Input: 0x00000001</li> <li>Polynomial: 0x04C11DB7</li> <li>Rev Output: 0x00000001</li> </ul> <ul> <li>Width: 32</li> <li>Final Xor: 0xFFFFFFFF</li> <li>Init Value: 0xFFFFFFFF</li> <li>Rev Input: 0x00000001</li> <li>Polynomial: 0xF4ACFB13</li> <li>Rev Output: 0x00000001</li> </ul> <ul> <li>Width: 32</li> <li>Final Xor: 0xFFFFFFFF</li> <li>Init Value: 0xFFFFFFFF</li> <li>Rev Input: 0x00000000</li> <li>Polynomial: 0x04C11DB7</li> <li>Rev Output: 0x00000000</li> </ul> <ul> <li>Width: 32</li> <li>Final Xor: 0xFFFFFFFF</li> <li>Init Value: 0x00000000</li> <li>Rev Input: 0x00000000</li> <li>Polynomial: 0x04C11DB7</li> <li>Rev Output: 0x00000000</li> </ul>"},{"location":"configurations/#crc64","title":"Crc64","text":"CRC64 <ul> <li>Width: 64</li> <li>Final Xor: 0x0000000000000000</li> <li>Init Value: 0x0000000000000000</li> <li>Rev Input: 0x0000000000000000</li> <li>Polynomial: 0x42F0E1EBA9EA3693</li> <li>Rev Output: 0x0000000000000000</li> </ul>"},{"location":"contributors/","title":"Contributors","text":"<p>Thank you to all contributors for your help in improving this project. \ud83d\ude80</p> <ul> <li>Gert van Dijk</li> <li>Riccardo Malavolti</li> <li>Ramya-Ab</li> <li>Dependabot</li> </ul>"},{"location":"api/abstract_register/","title":"AbstractRegister","text":"<p>Abstract base class / Interface a crc register needs to implement.</p> Workflow <ol> <li>The Crc-Register needs to be initialized.    1 time     (init)</li> <li>Data is feed into the crc register.          1..n times (update)</li> <li>Final result is calculated.                  1 time     (digest)</li> </ol>"},{"location":"api/abstract_register/#crc.AbstractRegister.digest","title":"<code>digest()</code>  <code>abstractmethod</code>","text":"<p>Final crc checksum will be calculated.</p> <p>Returns:</p> Type Description <code>int</code> <p>Final crc result/value (applies pending operations like final xor).</p>"},{"location":"api/abstract_register/#crc.AbstractRegister.init","title":"<code>init()</code>  <code>abstractmethod</code>","text":"<p>Initializes the crc register.</p>"},{"location":"api/abstract_register/#crc.AbstractRegister.reverse","title":"<code>reverse()</code>  <code>abstractmethod</code>","text":"<p>Calculates the reversed value of the crc register.</p> <p>Returns:</p> Type Description <code>int</code> <p>The reversed value of the crc register.</p>"},{"location":"api/abstract_register/#crc.AbstractRegister.update","title":"<code>update(data)</code>  <code>abstractmethod</code>","text":"<p>Feeds data into the register.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>which will be feed into the register.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Register content after the update.</p>"},{"location":"api/basic_register/","title":"BasicRegister","text":"<p>             Bases: <code>AbstractRegister</code></p> <p>Implements the common crc algorithm, assuming a user of this base class will provide an overwrite for the _process_byte method.</p>"},{"location":"api/basic_register/#crc.BasicRegister.__getitem__","title":"<code>__getitem__(index)</code>","text":"<p>Gets a single byte of the register.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>byte which shall be returned.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The byte at the specified index.</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>Invalid index for this register.</p>"},{"location":"api/basic_register/#crc.BasicRegister.__init__","title":"<code>__init__(configuration)</code>","text":"<p>Create a new BasicRegister.</p> <p>Parameters:</p> Name Type Description Default <code>configuration</code> <code>Configuration</code> <p>Used to configure the crc algorithm.</p> required"},{"location":"api/basic_register/#crc.BasicRegister.__len__","title":"<code>__len__()</code>","text":"<p>Returns:</p> Type Description <code>int</code> <p>The width of the register.</p>"},{"location":"api/basic_register/#crc.BasicRegister.digest","title":"<code>digest()</code>","text":"<p>See <code>AbstractRegister.digest</code></p>"},{"location":"api/basic_register/#crc.BasicRegister.init","title":"<code>init()</code>","text":"<p>See <code>AbstractRegister.init</code></p>"},{"location":"api/basic_register/#crc.BasicRegister.reverse","title":"<code>reverse()</code>","text":"<p>See <code>AbstractRegister.digest</code></p>"},{"location":"api/basic_register/#crc.BasicRegister.update","title":"<code>update(data)</code>","text":"<p>See <code>AbstractRegister.update</code></p>"},{"location":"api/calculator/","title":"Calculator","text":""},{"location":"api/calculator/#crc.InputType","title":"<code>InputType = Union[int, bytes, bytearray, memoryview, BinaryIO, Iterable[Union[bytes, bytearray, memoryview]]]</code>  <code>module-attribute</code>","text":"<p>Type alias for acceptable input types for Calculator.</p>"},{"location":"api/calculator/#crc.Calculator.__init__","title":"<code>__init__(configuration, optimized=False)</code>","text":"<p>Creates a new Calculator.</p> <p>Parameters:</p> Name Type Description Default <code>configuration</code> <code>Configuration</code> <p>for the crc algorithm.</p> required <code>optimized</code> <code>bool</code> <p>whether a register optimized for speed shall be used.</p> <code>False</code> <p> initializing an optimized calculator might take some extra time,           calculation itself will be faster though.</p>"},{"location":"api/calculator/#crc.Calculator.checksum","title":"<code>checksum(data)</code>","text":"<p>Calculates the checksum for the given data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>InputType</code> <p>which will be used as input for the checksum.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Checksum for the given input data.</p>"},{"location":"api/calculator/#crc.Calculator.verify","title":"<code>verify(data, expected)</code>","text":"<p>Verifies that the checksum for the given data is the expected one.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>InputType</code> <p>which will be used as input for the checksum.</p> required <code>expected</code> <code>int</code> <p>checksum.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the expected checksum matches the actual checksum for the given data, False otherwise.</p>"},{"location":"api/configuration/","title":"Configuration","text":"<p>A Configuration provides all settings necessary to determine the concrete implementation of a specific crc algorithm/register.</p> Example <p>Create a custom configuration</p> <pre><code>from crc import Configuration\n\nsaej1850 = Configuration(\n    width=8,\n    polynomial=0x1D,\n    init_value=0xFF,\n    final_xor_value=0xFF,\n    reverse_input=False,\n    reverse_output=False\n)\n</code></pre>"},{"location":"api/configuration/#crc.Configuration.width","title":"<code>width: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/configuration/#crc.Configuration.polynomial","title":"<code>polynomial: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/configuration/#crc.Configuration.init_value","title":"<code>init_value: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/configuration/#crc.Configuration.final_xor_value","title":"<code>final_xor_value: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/configuration/#crc.Configuration.reverse_input","title":"<code>reverse_input: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/configuration/#crc.Configuration.reverse_output","title":"<code>reverse_output: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc16/","title":"Crc16","text":""},{"location":"api/crc16/#available-configurations","title":"Available Configurations","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/crc16/#crc.Crc16.CCITT","title":"<code>CCITT = Configuration(width=16, polynomial=4129, init_value=0, final_xor_value=0, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc16/#crc.Crc16.GSM","title":"<code>GSM = Configuration(width=16, polynomial=4129, init_value=0, final_xor_value=65535, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc16/#crc.Crc16.PROFIBUS","title":"<code>PROFIBUS = Configuration(width=16, polynomial=7631, init_value=65535, final_xor_value=65535, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc32/","title":"Crc32","text":""},{"location":"api/crc32/#available-configurations","title":"Available Configurations","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/crc32/#crc.Crc32.CRC32","title":"<code>CRC32 = Configuration(width=32, polynomial=79764919, init_value=4294967295, final_xor_value=4294967295, reverse_input=True, reverse_output=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc32/#crc.Crc32.AUTOSAR","title":"<code>AUTOSAR = Configuration(width=32, polynomial=4104977171, init_value=4294967295, final_xor_value=4294967295, reverse_input=True, reverse_output=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc32/#crc.Crc32.BZIP2","title":"<code>BZIP2 = Configuration(width=32, polynomial=79764919, init_value=4294967295, final_xor_value=4294967295, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc32/#crc.Crc32.POSIX","title":"<code>POSIX = Configuration(width=32, polynomial=79764919, init_value=0, final_xor_value=4294967295, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc64/","title":"Crc64","text":""},{"location":"api/crc64/#available-configurations","title":"Available Configurations","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/crc64/#crc.Crc64.CRC64","title":"<code>CRC64 = Configuration(width=64, polynomial=4823603603198064275, init_value=0, final_xor_value=0, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc8/","title":"Crc8","text":""},{"location":"api/crc8/#available-configurations","title":"Available Configurations","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/crc8/#crc.Crc8.CCITT","title":"<code>CCITT = Configuration(width=8, polynomial=7, init_value=0, final_xor_value=0, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc8/#crc.Crc8.AUTOSAR","title":"<code>AUTOSAR = Configuration(width=8, polynomial=47, init_value=255, final_xor_value=255, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc8/#crc.Crc8.BLUETOOTH","title":"<code>BLUETOOTH = Configuration(width=8, polynomial=167, init_value=0, final_xor_value=0, reverse_input=True, reverse_output=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc8/#crc.Crc8.SAEJ1850","title":"<code>SAEJ1850 = Configuration(width=8, polynomial=29, init_value=255, final_xor_value=255, reverse_input=False, reverse_output=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/crc8/#crc.Crc8.MAXIM_DOW","title":"<code>MAXIM_DOW = Configuration(width=8, polynomial=49, init_value=0, final_xor_value=0, reverse_input=True, reverse_output=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/register/","title":"Register","text":"<p>             Bases: <code>BasicRegister</code></p> <p>Simple crc register, which will process one bit at the time.</p> Note <p>If performance is an important issue for the crc calculation use a table based register.</p>"},{"location":"api/table_based_register/","title":"TableBasedRegister","text":"<p>             Bases: <code>BasicRegister</code></p> <p>Lookup table based crc register.</p> Info <p>This register type will be much faster than a simple bit by bit based crc register like <code>Register</code>.</p>"},{"location":"api/table_based_register/#crc.TableBasedRegister.__init__","title":"<code>__init__(configuration)</code>","text":"<p>Creates a new table based crc register.</p> <p>Parameters:</p> Name Type Description Default <code>configuration</code> <code>Configuration</code> <p>used for the crc algorithm.</p> required Attention <p>Creating a table based register initially might take some extra time, due to the fact that some lookup tables need to be calculated/initialized.</p>"},{"location":"changelog/changes_2.0.0/","title":"2.0.0 - 2022-11-27","text":""},{"location":"changelog/changes_2.0.0/#breaking-api-changes","title":"\ud83d\udea8 Breaking API Changes","text":"<p>** Renamed **</p> <p>Classes:</p> <ul> <li><code>AbstractCrcRegister</code> -&gt; <code>AbstractRegister</code></li> <li><code>CrcRegisterBase</code> -&gt; <code>BasicRegister</code></li> <li><code>CrcRegister</code> -&gt; <code>Register</code></li> <li><code>TableBasedCrcRegister</code> -&gt; <code>TableBasedRegister</code></li> <li><code>CrcCalculator</code> -&gt; <code>Calculator</code></li> </ul> <p>Functions &amp; Methods:</p> <ul> <li><code>CrcCalculator.calculate_checksum</code> -&gt; <code>Calculator.checksum</code></li> <li><code>CrcCalculator.verify_checksum</code> -&gt; <code>Calculator.verify</code></li> <li>[public] <code>argument_parser()</code> -&gt; [private] <code>_argument_parser()</code></li> </ul> <p>Arguments:</p> <ul> <li><code>CrcCalculator(configuration, table_based=False)</code> -&gt; <code>Calculator(configuration, optimized=False)</code></li> </ul> <p>** Removed **</p> <ul> <li>Removed <code>CRC_TYPES</code> mapping</li> <li>Removed <code>checksum</code> function/cli-entry-point</li> </ul>"},{"location":"changelog/changes_2.0.0/#removed","title":"\ud83d\uddd1 Removed","text":"<ul> <li>Removed checksum subcommand from CLI</li> <li>Removed <code>CRC_TYPES</code> mapping</li> </ul>"},{"location":"changelog/changes_2.0.0/#added","title":"\u2728 Added","text":"<ul> <li>Added typing support</li> <li>Added Documentation see here</li> </ul>"},{"location":"changelog/changes_2.0.0/#refactorings","title":"\ud83d\udd27 Refactorings","text":"<ul> <li>Fixed various linter warnings</li> </ul>"},{"location":"changelog/changes_3.0.0/","title":"3.0.0 - 2022-12-04","text":""},{"location":"changelog/changes_3.0.0/#breaking-api-changes","title":"\ud83d\udea8 Breaking API Changes","text":"<p>** Renamed **</p> <p>Functions &amp; Methods:</p> <ul> <li> <p>Renamed keyword argument <code>expected_checksum</code> of method <code>Calculator.verify</code> to <code>expected</code></p> Old APINew API <pre><code>def verify(self, data: bytes, expected_checksum: int ) -&gt; bool:\n    ...\n</code></pre> <pre><code>def verify(self, data: Union[int, ByteString, BinaryIO, Iterable[ByteString]], expected: int ) -&gt; bool:\n    ...\n</code></pre> </li> </ul>"},{"location":"changelog/changes_3.0.0/#fixes","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Fixed return type for all inputs of ByteString types</li> </ul>"},{"location":"changelog/changes_3.0.0/#added","title":"\u2728 Added","text":"<ul> <li>Added support for other data types than <code>bytes</code> to <code>Calculator.checksum</code> and <code>Calculator.verify</code></li> </ul> <p>(<code>int</code>, <code>ByteString</code>, <code>BinaryIO</code>, <code>Iterable[ByteString]</code>)</p>"},{"location":"changelog/changes_3.0.0/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Renamed \"Latest - Changes\" to \"Unreleased\"</li> <li>Added \"API\" section</li> <li>Added \"development\" section</li> </ul>"},{"location":"changelog/changes_3.0.1/","title":"3.0.1 - 2022-12-18","text":""},{"location":"changelog/changes_3.0.1/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Fix code example in 3.0.0  changelog entry</li> <li>Fix code example in README #59</li> </ul>"},{"location":"changelog/changes_3.0.1/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Adjust release.workflow task</li> <li>Update dev dependencies</li> </ul>"},{"location":"changelog/changes_4.0.0/","title":"4.0.0 - 2022-12-18","text":""},{"location":"changelog/changes_4.0.0/#breaking-changes","title":"\ud83d\udea8 Breaking Changes","text":"<ul> <li>Remove Python 3.7 support</li> </ul>"},{"location":"changelog/changes_4.0.0/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Update repository status badge</li> <li>Fix heading in 3.0.1 changelog</li> </ul>"},{"location":"changelog/changes_4.0.0/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Remove nox support</li> <li>Add additional pypi metadata</li> <li>Fix CI/CD checks and tasks</li> </ul>"},{"location":"changelog/changes_4.1.0/","title":"4.1.0 - 2022-12-18","text":""},{"location":"changelog/changes_4.1.0/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Update repository status badge in documentation</li> <li>Fix minimum required version in documentation and README</li> <li>Update developer documentation</li> </ul>"},{"location":"changelog/changes_4.1.0/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Remove custom python version classifiers from pyproject.toml</li> <li>Add support for GitHub release notes</li> </ul>"},{"location":"changelog/changes_4.2.0/","title":"4.2.0 - 2023-04-16","text":""},{"location":"changelog/changes_4.2.0/#features","title":"\u2728 Features","text":"<ul> <li>Add support for MODBUS</li> </ul>"},{"location":"changelog/changes_4.2.0/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Add copy button support for code snippets</li> </ul>"},{"location":"changelog/changes_4.2.0/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Fix path to changelog file for GitHub release</li> <li>Add python 3.11 to test matrix</li> <li>Add pre-commit support</li> <li>Update dev dependencies</li> <li>Fix mypy warnings</li> </ul>"},{"location":"changelog/changes_4.3.0/","title":"4.3.0 - 2023-06-25","text":""},{"location":"changelog/changes_4.3.0/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Fix typo in license file</li> </ul>"},{"location":"changelog/changes_4.3.0/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Update lockfile</li> </ul>"},{"location":"changelog/changes_5.0.0/","title":"5.0.0 - 2023-10-08","text":"<p>\ud83d\ude80 This release is powered by Gert van Dijk, thank you for your contribution!</p>"},{"location":"changelog/changes_5.0.0/#breaking-changes","title":"\ud83d\udea8 Breaking Changes","text":"<ul> <li> <p>Move from a single-file/module to an \u2018src-based layout\u2019 package.</p> <p>The layout of the source repository has changed from single file <code>crc.py</code> in the root into a package where <code>crc.py</code> is now a private module <code>_crc.py</code> of package <code>crc</code>.</p> <pre><code>src/\n\u2514\u2500\u2500 crc/\n    \u251c\u2500\u2500 _crc.py\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p><code>__init__.py</code> re-exports all the public entities from the private module, so that typical imports like <code>from crc import Calculator</code> remain working as-is.</p> <p>The need and choice for this new layout is discussed in Issue #110.</p> </li> <li> <p>The shebang line on the main <code>src/crc/_crc.py</code> file (formerly <code>crc.py</code>) has been   removed.</p> <p>This shouldn't affect anyone installing <code>crc</code> as package. Both the entrypoint <code>crc</code> and the package-level <code>__main__</code> remain in place.</p> <p>However, in case you were to obtain the <code>src/crc/_crc.py</code> file (formerly <code>crc.py</code>) and mark it as executable afterwards to run it directly, then this change may affect you. Running the <code>main()</code> function can then still be achieved by either:</p> <ul> <li><code>python path/to/crc.py</code></li> <li><code>python -m crc</code> (if the module is on your <code>PYTHON_PATH</code>)</li> </ul> </li> </ul>"},{"location":"changelog/changes_5.0.0/#added","title":"\u2728 Added","text":"<ul> <li>Add <code>py.typed</code> marker to indicate the <code>crc</code> package ships with type information. The   type information was added inline since 2.0.0, but the marker file   was missing in the package, so type checkers did not consider the type information.   This eliminates the use of <code>ignore_missing_imports</code> (mypy) or <code>reportMissingTypeStubs</code>   (Pylance/Pyright) in downstream projects.</li> </ul>"},{"location":"changelog/changes_5.0.0/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Add contributors page</li> </ul>"},{"location":"changelog/changes_5.0.0/#internal-development","title":"\ud83d\udd29  Internal / Development","text":"<ul> <li>Several improvements to type annotations:<ul> <li>Conform to mypy in strict mode.</li> <li>Type information now follows a more modern syntax by implementing recommendations     from PEPs 563, 585, 604 while maintaining     support for Python 3.8.</li> <li>Declare all instance variables on classes.</li> <li>Create a Type Alias for a complex Union used repetitively.</li> </ul> </li> <li>Remove unnecessary parentheses and <code>start</code> argument in <code>range()</code>.</li> <li>Remove unused imports.</li> <li>Update lockfile.</li> </ul>"},{"location":"changelog/changes_6.0.0/","title":"6.0.0 - 2023-12-02","text":""},{"location":"changelog/changes_6.0.0/#breaking-changes","title":"\ud83d\udea8\ufe0f Breaking Changes","text":"<ul> <li>Remove Python 3.7 support</li> <li>Changed SAE1850J configuration (see Bug fixes)</li> </ul>"},{"location":"changelog/changes_6.0.0/#bug-fix","title":"\ud83d\udc1e Bug Fix","text":"<ul> <li> <p>Adjusted the SAE-J1850 configuration to match the specification</p> <p>\ud83d\udea8\ufe0f For users which do rely on the previously misconfigured <code>SAEJ1850</code> settings a configuration named <code>SAEJ1850_ZERO</code> was added.</p> </li> </ul>"},{"location":"changelog/changes_6.0.0/#internal-development","title":"\ud83d\udd29  Internal / Development","text":"<ul> <li>Add <code>python 3.12</code> to test matrix</li> <li>Re-lock dev dependencies</li> </ul>"},{"location":"changelog/changes_6.1.0/","title":"6.1.0 - 2023-12-30","text":"<p>\ud83d\ude80 This release is powered by Riccardo Malavolti, thank you for your contribution!</p>"},{"location":"changelog/changes_6.1.0/#features","title":"\u2728 Features","text":"<ul> <li>Add support for IBM-3740 (also known as CCITT-FALSE)</li> </ul>"},{"location":"changelog/changes_6.1.0/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Update GitHub Action(s)</li> <li>Re-lock dependencies</li> </ul>"},{"location":"changelog/changes_6.1.1/","title":"6.1.1 - 2024-02-10","text":"<p>\ud83d\ude80 This release is powered by Ramya-Ab, thank you for your contribution!</p>"},{"location":"changelog/changes_6.1.1/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Fix typos in README</li> </ul>"},{"location":"changelog/changes_6.1.1/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Re-lock dependencies</li> </ul>"},{"location":"changelog/changes_6.1.2/","title":"6.1.2 - 2024-04-14","text":""},{"location":"changelog/changes_6.1.2/#bug-fixes","title":"\ud83d\udc1e Bug Fixes","text":"<ul> <li> <p>Fixed unstable return values of <code>digest</code> function. For more details, see issue #151.</p> <p>Bug</p> <p>This issue specifically affected scenarios where the CRC register was manually manipulated. Standard usages of the <code>Calculator</code> class were not impacted. Furthermore, this issue primarily occurred in configurations that required reverse output.</p> </li> </ul>"},{"location":"changelog/changes_6.1.2/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Add overview of crc configurations</li> </ul>"},{"location":"changelog/changes_6.1.2/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Re-lock dependencies</li> </ul>"},{"location":"changelog/unreleased/","title":"Unreleased","text":""},{"location":"changelog/unreleased/#internal","title":"\ud83d\udd29  Internal","text":"<ul> <li>Update <code>python-environment</code> action</li> <li>Add classifiers to <code>pyproject.toml</code></li> </ul>"},{"location":"development/release/","title":"Release","text":""},{"location":"development/release/#create-a-release-using-the-github-release-workflow","title":"Create a release using the GitHub release workflow","text":"<ol> <li>Rename <code>unreleased.md</code> to <code>changes_{X.Y.Z}.md</code></li> <li>Update heading in <code>changes_{X.Y.Z}.md</code> to reflect the release version</li> <li>Add the current date behind the release number    <pre><code># X.Y.Z - YYYY-MM-DD\n</code></pre></li> <li>Prepare the release    <pre><code>invoke release.prepare X.Y.Z\n</code></pre></li> <li>Run the CI/CD pipeline to publish the release:    Execute the <code>release.workflow</code> task and follow potential instructions.    <pre><code>invoke release.workflow X.Y.Z\n</code></pre></li> </ol>"},{"location":"development/setup/","title":"Setup","text":""},{"location":"development/setup/#requirements-tldr","title":"Requirements TL;DR","text":"<ul> <li>poetry</li> <li>gh</li> </ul>"},{"location":"development/setup/#1-install-poetry","title":"1. Install Poetry","text":"<p>Follow the poetry installation instructions.</p>"},{"location":"development/setup/#2-install-gh","title":"2. Install gh","text":"<p>Follow the gh installation instructions.</p>"},{"location":"development/setup/#3-checkout-the-project","title":"3. Checkout the project","text":"GitHub CLISSHHTTPS <pre><code>gh repo clone Nicoretti/crc\n</code></pre> <pre><code>git clone git@github.com:Nicoretti/crc.git\n</code></pre> <pre><code>git clone https://github.com/Nicoretti/crc.git\n</code></pre>"},{"location":"development/setup/#4-switch-into-the-directory","title":"4. Switch into the directory","text":"<pre><code>cd crc\n</code></pre>"},{"location":"development/setup/#5-the-poetry-environment","title":"5. The Poetry environment","text":"<p>Make sure the poetry environment is setup properly and all dependencies are installed.</p> <ol> <li> <p>Activate the Poetry shell</p> <pre><code>poetry shell\n</code></pre> </li> <li> <p>Install the project dependencies</p> <pre><code>poetry install\n</code></pre> </li> </ol>"},{"location":"development/setup/#run-the-init-task","title":"Run the <code>init</code> task","text":"<p>In order to bootstrap the remaining parts of the workspace setup, just execute the following command:</p> <pre><code>invoke init\n</code></pre> <p>Note</p> <p>Follow potential instructions.</p>"}]}