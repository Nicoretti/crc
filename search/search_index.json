{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CRC Calculate CRC checksums, verify CRC checksum, predefined CRC configurations, custom CRC configurations Documentation: https://nicoretti.github.io/crc Source Code: https://github.com/Nicoretti/crc Available CRC Configurations For convince various frequently used crc configurations ship with the library out of the box. CRC8 CRC16 CRC32 CRC64 CCITT CCITT CRC32 CRC64 AUTOSAR GSM AUTOSAR SAJ1850 PROFIBUS BZIP2 BLUETOOTH POSIX MAXIM-DOW If you find yourself in the position, where having a new configuration available out of the box would be desirable, feel free to create a PR or file an issue . Custom Configurations If you want to create a custom configuration, you should have the following information available: Note This library currently only supports bit widths of full bytes 8, 16, 24, 32, ... width polynom init value final xor value reversed input reversed output In case you only have a name of a specific crc configuration/algorithm and you are unsure what are the specific parameters of it, a look into this crc-catalogue might help. Requirements >= Python 3.7 Installation pip install crc Examples Create a Calculator Pre defined configuration Custom configuration from crc import Calculator , Crc8 calculator = Calculator ( Crc8 . CCITT ) from crc import Calculator , Configuration config = Configuration ( width = 8 , poly = 0x07 , init_value = 0x00 , final_xor_value = 0x00 , reverse_input = False , reverse_output = False , ) calculator = Calculator ( config ) Calculate a checksum Standard Optimized for speed from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT ) assert expected == calculator . checksum ( data ) from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert expected == calculator . checksum ( data ) Verify a checksum Standard Optimized for speed from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT ) assert calculator . verify ( data , expected ) from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . verify ( data , expected ) Supported data types int bytes bytearray File ByteIo Iterable of bytes Byte convertibles from crc import Calculator , Crc8 expected = 0x20 data = 97 calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 data = b \"123456789\" calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 data = bytearray ( b \"123456789\" ) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) with open ( \"afile.txt\" , \"rb\" ) as f : assert calculator . checksum ( f ) == expected import io from crc import Calculator , Crc8 expected = 0xF4 data = io . ByteIo ( b \"123456789\" ) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) data = ( data for data in [ b \"12\" , b \"34\" , b \"56\" , b \"78\" , b \"9\" ]) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 class ByteConvertible : def __init__ ( self , data ): self . _data = data def __bytes__ ( self ): return self . _data . encode ( \"utf-8\" ) expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) data = ByteConvertible ( \"123456789\" ) assert calculator . checksum ( bytes ( data )) == expected Calculate a checksum with raw registers Register TableBasedRegister from crc import Crc8 , Register expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) register = Register ( Crc8 . CCITT ) register . init () register . update ( data ) assert expected == register . digest () from crc import Crc8 , TableBasedRegister expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) register = TableBasedRegister ( Crc8 . CCITT ) register . init () register . update ( data ) assert expected == register . digest () References & Resources A Painless guide to crc error detection algorithms CRC-Catalogue","title":"Home"},{"location":"#available-crc-configurations","text":"For convince various frequently used crc configurations ship with the library out of the box. CRC8 CRC16 CRC32 CRC64 CCITT CCITT CRC32 CRC64 AUTOSAR GSM AUTOSAR SAJ1850 PROFIBUS BZIP2 BLUETOOTH POSIX MAXIM-DOW If you find yourself in the position, where having a new configuration available out of the box would be desirable, feel free to create a PR or file an issue .","title":"Available CRC Configurations"},{"location":"#custom-configurations","text":"If you want to create a custom configuration, you should have the following information available: Note This library currently only supports bit widths of full bytes 8, 16, 24, 32, ... width polynom init value final xor value reversed input reversed output In case you only have a name of a specific crc configuration/algorithm and you are unsure what are the specific parameters of it, a look into this crc-catalogue might help.","title":"Custom Configurations"},{"location":"#requirements","text":">= Python 3.7","title":"Requirements"},{"location":"#installation","text":"pip install crc","title":"Installation"},{"location":"#examples","text":"","title":"Examples"},{"location":"#create-a-calculator","text":"Pre defined configuration Custom configuration from crc import Calculator , Crc8 calculator = Calculator ( Crc8 . CCITT ) from crc import Calculator , Configuration config = Configuration ( width = 8 , poly = 0x07 , init_value = 0x00 , final_xor_value = 0x00 , reverse_input = False , reverse_output = False , ) calculator = Calculator ( config )","title":"Create a Calculator"},{"location":"#calculate-a-checksum","text":"Standard Optimized for speed from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT ) assert expected == calculator . checksum ( data ) from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert expected == calculator . checksum ( data )","title":"Calculate a checksum"},{"location":"#verify-a-checksum","text":"Standard Optimized for speed from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT ) assert calculator . verify ( data , expected ) from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . verify ( data , expected )","title":"Verify a checksum"},{"location":"#supported-data-types","text":"int bytes bytearray File ByteIo Iterable of bytes Byte convertibles from crc import Calculator , Crc8 expected = 0x20 data = 97 calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 data = b \"123456789\" calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 data = bytearray ( b \"123456789\" ) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) with open ( \"afile.txt\" , \"rb\" ) as f : assert calculator . checksum ( f ) == expected import io from crc import Calculator , Crc8 expected = 0xF4 data = io . ByteIo ( b \"123456789\" ) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) data = ( data for data in [ b \"12\" , b \"34\" , b \"56\" , b \"78\" , b \"9\" ]) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 class ByteConvertible : def __init__ ( self , data ): self . _data = data def __bytes__ ( self ): return self . _data . encode ( \"utf-8\" ) expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) data = ByteConvertible ( \"123456789\" ) assert calculator . checksum ( bytes ( data )) == expected","title":"Supported data types"},{"location":"#calculate-a-checksum-with-raw-registers","text":"Register TableBasedRegister from crc import Crc8 , Register expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) register = Register ( Crc8 . CCITT ) register . init () register . update ( data ) assert expected == register . digest () from crc import Crc8 , TableBasedRegister expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) register = TableBasedRegister ( Crc8 . CCITT ) register . init () register . update ( data ) assert expected == register . digest ()","title":"Calculate a checksum with raw registers"},{"location":"#references-resources","text":"A Painless guide to crc error detection algorithms CRC-Catalogue","title":"References &amp; Resources"},{"location":"cli/","text":"Command Line Tools The crc library comes with a small command line tool which can generate crc lookup tables if needed. usage: crc table [-h] <width> <polynomial> positional arguments: <width> width of the crc algorithm, common width's are 8, 16, 32, 64 <polynomial> hex value of the polynomial used for calculating the crc table optional arguments: -h, --help show this help message and exit Example Usage: user@host ~$ crc table 8 0x7D","title":"Command Line Tools"},{"location":"cli/#command-line-tools","text":"The crc library comes with a small command line tool which can generate crc lookup tables if needed. usage: crc table [-h] <width> <polynomial> positional arguments: <width> width of the crc algorithm, common width's are 8, 16, 32, 64 <polynomial> hex value of the polynomial used for calculating the crc table optional arguments: -h, --help show this help message and exit Example Usage: user@host ~$ crc table 8 0x7D","title":"Command Line Tools"},{"location":"release-notes/","text":"Release Notes Latest Changes \ud83d\udea8 Breaking API Changes Renamed Functions & Methods: Renamed keyword argument expected_checksum of method Calculator.verify to expected Old API New API def verify ( self , data : bytes , expected_checksum : int ) -> bool : ... def verify ( self , data : Union [ int , ByteString , BinaryIO , Iterable [ ByteString ]], expected : int ) -> bool : ... \u2728 Added Added support for other data types than bytes to Calculator.checksum and Calculator.verify ( int , ByteString , BinaryIO , Iterable[ByteString] ) 2.0.0 - 2022-11-27 \ud83d\udea8 Breaking API Changes Renamed Classes: AbstractCrcRegister -> AbstractRegister CrcRegisterBase -> BasicRegister CrcRegister -> Register TableBasedCrcRegister -> TableBasedRegister CrcCalculator -> Calculator Functions & Methods: CrcCalculator.calculate_checksum -> Calculator.checksum CrcCalculator.verify_checksum -> Calculator.verify [public] argument_parser() -> [private] _argument_parser() Arguments: CrcCalculator(configuration, table_based=False) -> Calculator(configuration, optimized=False) Removed Removed CRC_TYPES mapping Removed checksum function/cli-entry-point \ud83d\uddd1 Removed Removed checksum subcommand from CLI Removed CRC_TYPES mapping \u2728 Added Added typing support Added Documentation see here \ud83d\udd27 Refactorings Fixed various linter warnings","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#latest-changes","text":"","title":"Latest Changes"},{"location":"release-notes/#breaking-api-changes","text":"Renamed Functions & Methods: Renamed keyword argument expected_checksum of method Calculator.verify to expected Old API New API def verify ( self , data : bytes , expected_checksum : int ) -> bool : ... def verify ( self , data : Union [ int , ByteString , BinaryIO , Iterable [ ByteString ]], expected : int ) -> bool : ...","title":"\ud83d\udea8 Breaking API Changes"},{"location":"release-notes/#added","text":"Added support for other data types than bytes to Calculator.checksum and Calculator.verify ( int , ByteString , BinaryIO , Iterable[ByteString] )","title":"\u2728 Added"},{"location":"release-notes/#200-2022-11-27","text":"","title":"2.0.0 - 2022-11-27"},{"location":"release-notes/#breaking-api-changes_1","text":"Renamed Classes: AbstractCrcRegister -> AbstractRegister CrcRegisterBase -> BasicRegister CrcRegister -> Register TableBasedCrcRegister -> TableBasedRegister CrcCalculator -> Calculator Functions & Methods: CrcCalculator.calculate_checksum -> Calculator.checksum CrcCalculator.verify_checksum -> Calculator.verify [public] argument_parser() -> [private] _argument_parser() Arguments: CrcCalculator(configuration, table_based=False) -> Calculator(configuration, optimized=False) Removed Removed CRC_TYPES mapping Removed checksum function/cli-entry-point","title":"\ud83d\udea8 Breaking API Changes"},{"location":"release-notes/#removed","text":"Removed checksum subcommand from CLI Removed CRC_TYPES mapping","title":"\ud83d\uddd1 Removed"},{"location":"release-notes/#added_1","text":"Added typing support Added Documentation see here","title":"\u2728 Added"},{"location":"release-notes/#refactorings","text":"Fixed various linter warnings","title":"\ud83d\udd27 Refactorings"}]}