{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CRC Calculate CRC checksums, verify CRC checksum, predefined CRC configurations, custom CRC configurations Documentation: https://nicoretti.github.io/crc Source Code: https://github.com/Nicoretti/crc Available CRC Configurations For convince various frequently used crc configurations ship with the library out of the box. CRC8 CRC16 CRC32 CRC64 CCITT CCITT CRC32 CRC64 AUTOSAR GSM AUTOSAR SAJ1850 PROFIBUS BZIP2 BLUETOOTH POSIX MAXIM-DOW If you find yourself in the position, where having a new configuration available out of the box would be desirable, feel free to create a PR or file an issue . Custom Configurations If you want to create a custom configuration, you should have the following information available: Note This library currently only supports bit widths of full bytes 8, 16, 24, 32, ... width polynom init value final xor value reversed input reversed output In case you only have a name of a specific crc configuration/algorithm and you are unsure what are the specific parameters of it, a look into this crc-catalogue might help. Requirements >= Python 3.7 Installation pip install crc Examples Create a Calculator Pre defined configuration Custom configuration from crc import Calculator , Crc8 calculator = Calculator ( Crc8 . CCITT ) from crc import Calculator , Configuration config = Configuration ( width = 8 , poly = 0x07 , init_value = 0x00 , final_xor_value = 0x00 , reverse_input = False , reverse_output = False , ) calculator = Calculator ( config ) Calculate a checksum Standard Optimized for speed from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT ) assert expected == calculator . checksum ( data ) from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert expected == calculator . checksum ( data ) Verify a checksum Standard Optimized for speed from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT ) assert calculator . verify ( data , expected ) from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . verify ( data , expected ) Supported data types int bytes bytearray File ByteIo Iterable of bytes Byte convertibles from crc import Calculator , Crc8 expected = 0x20 data = 97 calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 data = b \"123456789\" calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 data = bytearray ( b \"123456789\" ) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) with open ( \"afile.txt\" , \"rb\" ) as f : assert calculator . checksum ( f ) == expected import io from crc import Calculator , Crc8 expected = 0xF4 data = io . ByteIo ( b \"123456789\" ) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) data = ( data for data in [ b \"12\" , b \"34\" , b \"56\" , b \"78\" , b \"9\" ]) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 class ByteConvertible : def __init__ ( self , data ): self . _data = data def __bytes__ ( self ): return self . _data . encode ( \"utf-8\" ) expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) data = ByteConvertible ( \"123456789\" ) assert calculator . checksum ( bytes ( data )) == expected Calculate a checksum with raw registers Register TableBasedRegister from crc import Crc8 , Register expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) register = Register ( Crc8 . CCITT ) register . init () register . update ( data ) assert expected == register . digest () from crc import Crc8 , TableBasedRegister expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) register = TableBasedRegister ( Crc8 . CCITT ) register . init () register . update ( data ) assert expected == register . digest () References & Resources A Painless guide to crc error detection algorithms CRC-Catalogue","title":"Home"},{"location":"#available-crc-configurations","text":"For convince various frequently used crc configurations ship with the library out of the box. CRC8 CRC16 CRC32 CRC64 CCITT CCITT CRC32 CRC64 AUTOSAR GSM AUTOSAR SAJ1850 PROFIBUS BZIP2 BLUETOOTH POSIX MAXIM-DOW If you find yourself in the position, where having a new configuration available out of the box would be desirable, feel free to create a PR or file an issue .","title":"Available CRC Configurations"},{"location":"#custom-configurations","text":"If you want to create a custom configuration, you should have the following information available: Note This library currently only supports bit widths of full bytes 8, 16, 24, 32, ... width polynom init value final xor value reversed input reversed output In case you only have a name of a specific crc configuration/algorithm and you are unsure what are the specific parameters of it, a look into this crc-catalogue might help.","title":"Custom Configurations"},{"location":"#requirements","text":">= Python 3.7","title":"Requirements"},{"location":"#installation","text":"pip install crc","title":"Installation"},{"location":"#examples","text":"","title":"Examples"},{"location":"#create-a-calculator","text":"Pre defined configuration Custom configuration from crc import Calculator , Crc8 calculator = Calculator ( Crc8 . CCITT ) from crc import Calculator , Configuration config = Configuration ( width = 8 , poly = 0x07 , init_value = 0x00 , final_xor_value = 0x00 , reverse_input = False , reverse_output = False , ) calculator = Calculator ( config )","title":"Create a Calculator"},{"location":"#calculate-a-checksum","text":"Standard Optimized for speed from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT ) assert expected == calculator . checksum ( data ) from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert expected == calculator . checksum ( data )","title":"Calculate a checksum"},{"location":"#verify-a-checksum","text":"Standard Optimized for speed from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT ) assert calculator . verify ( data , expected ) from crc import Calculator , Crc8 expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . verify ( data , expected )","title":"Verify a checksum"},{"location":"#supported-data-types","text":"int bytes bytearray File ByteIo Iterable of bytes Byte convertibles from crc import Calculator , Crc8 expected = 0x20 data = 97 calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 data = b \"123456789\" calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 data = bytearray ( b \"123456789\" ) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) with open ( \"afile.txt\" , \"rb\" ) as f : assert calculator . checksum ( f ) == expected import io from crc import Calculator , Crc8 expected = 0xF4 data = io . ByteIo ( b \"123456789\" ) calculator = Calculator ( Crc8 . CCITT , optimized = True ) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) data = ( data for data in [ b \"12\" , b \"34\" , b \"56\" , b \"78\" , b \"9\" ]) assert calculator . checksum ( data ) == expected from crc import Calculator , Crc8 class ByteConvertible : def __init__ ( self , data ): self . _data = data def __bytes__ ( self ): return self . _data . encode ( \"utf-8\" ) expected = 0xF4 calculator = Calculator ( Crc8 . CCITT , optimized = True ) data = ByteConvertible ( \"123456789\" ) assert calculator . checksum ( bytes ( data )) == expected","title":"Supported data types"},{"location":"#calculate-a-checksum-with-raw-registers","text":"Register TableBasedRegister from crc import Crc8 , Register expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) register = Register ( Crc8 . CCITT ) register . init () register . update ( data ) assert expected == register . digest () from crc import Crc8 , TableBasedRegister expected = 0xBC data = bytes ([ 0 , 1 , 2 , 3 , 4 , 5 ]) register = TableBasedRegister ( Crc8 . CCITT ) register . init () register . update ( data ) assert expected == register . digest ()","title":"Calculate a checksum with raw registers"},{"location":"#references-resources","text":"A Painless guide to crc error detection algorithms CRC-Catalogue","title":"References &amp; Resources"},{"location":"cli/","text":"CLI Tools The crc library comes with a small command line tool which can generate crc lookup tables if needed. usage: crc table [-h] <width> <polynomial> positional arguments: <width> width of the crc algorithm, common width's are 8, 16, 32, 64 <polynomial> hex value of the polynomial used for calculating the crc table optional arguments: -h, --help show this help message and exit Example Usage: user@host ~$ crc table 8 0x7D","title":"CLI Tools"},{"location":"cli/#cli-tools","text":"The crc library comes with a small command line tool which can generate crc lookup tables if needed. usage: crc table [-h] <width> <polynomial> positional arguments: <width> width of the crc algorithm, common width's are 8, 16, 32, 64 <polynomial> hex value of the polynomial used for calculating the crc table optional arguments: -h, --help show this help message and exit Example Usage: user@host ~$ crc table 8 0x7D","title":"CLI Tools"},{"location":"development/","text":"Contributing","title":"Contributing"},{"location":"development/#contributing","text":"","title":"Contributing"},{"location":"api/abstract_register/","text":"AbstractRegister Abstract base class / Interface a crc register needs to implement. Workflow The Crc-Register needs to be initialized. 1 time (init) Data is feed into the crc register. 1..n times (update) Final result is calculated. 1 time (digest) digest () abstractmethod Final crc checksum will be calculated. Returns: Type Description int Final crc result/value (applies pending operations like final xor). init () abstractmethod Initializes the crc register. reverse () abstractmethod Calculates the reversed value of the crc register. Returns: Type Description int The reversed value of the crc register. update ( data ) abstractmethod Feeds data into the register. Parameters: Name Type Description Default data bytes which will be feed into the register. required Returns: Type Description int Register content after the update.","title":"AbstractRegister"},{"location":"api/abstract_register/#abstractregister","text":"Abstract base class / Interface a crc register needs to implement. Workflow The Crc-Register needs to be initialized. 1 time (init) Data is feed into the crc register. 1..n times (update) Final result is calculated. 1 time (digest)","title":"AbstractRegister"},{"location":"api/abstract_register/#crc.AbstractRegister.digest","text":"Final crc checksum will be calculated. Returns: Type Description int Final crc result/value (applies pending operations like final xor).","title":"digest()"},{"location":"api/abstract_register/#crc.AbstractRegister.init","text":"Initializes the crc register.","title":"init()"},{"location":"api/abstract_register/#crc.AbstractRegister.reverse","text":"Calculates the reversed value of the crc register. Returns: Type Description int The reversed value of the crc register.","title":"reverse()"},{"location":"api/abstract_register/#crc.AbstractRegister.update","text":"Feeds data into the register. Parameters: Name Type Description Default data bytes which will be feed into the register. required Returns: Type Description int Register content after the update.","title":"update()"},{"location":"api/basic_register/","text":"BasicRegister Bases: AbstractRegister Implements the common crc algorithm, assuming a user of this base class will provide an overwrite for the _process_byte method. __getitem__ ( index ) Gets a single byte of the register. Parameters: Name Type Description Default index int byte which shall be returned. required Returns: Type Description int The byte at the specified index. Raises: Type Description IndexError Invalid index for this register. __init__ ( configuration ) Create a new BasicRegister. Parameters: Name Type Description Default configuration Configuration Used to configure the crc algorithm. required __len__ () Returns: Type Description int The width of the register. digest () See AbstractRegister.digest init () See AbstractRegister.init reverse () See AbstractRegister.digest update ( data ) See AbstractRegister.update","title":"BasicRegister"},{"location":"api/basic_register/#basicregister","text":"Bases: AbstractRegister Implements the common crc algorithm, assuming a user of this base class will provide an overwrite for the _process_byte method.","title":"BasicRegister"},{"location":"api/basic_register/#crc.BasicRegister.__getitem__","text":"Gets a single byte of the register. Parameters: Name Type Description Default index int byte which shall be returned. required Returns: Type Description int The byte at the specified index. Raises: Type Description IndexError Invalid index for this register.","title":"__getitem__()"},{"location":"api/basic_register/#crc.BasicRegister.__init__","text":"Create a new BasicRegister. Parameters: Name Type Description Default configuration Configuration Used to configure the crc algorithm. required","title":"__init__()"},{"location":"api/basic_register/#crc.BasicRegister.__len__","text":"Returns: Type Description int The width of the register.","title":"__len__()"},{"location":"api/basic_register/#crc.BasicRegister.digest","text":"See AbstractRegister.digest","title":"digest()"},{"location":"api/basic_register/#crc.BasicRegister.init","text":"See AbstractRegister.init","title":"init()"},{"location":"api/basic_register/#crc.BasicRegister.reverse","text":"See AbstractRegister.digest","title":"reverse()"},{"location":"api/basic_register/#crc.BasicRegister.update","text":"See AbstractRegister.update","title":"update()"},{"location":"api/calculator/","text":"Calculator __init__ ( configuration , optimized = False ) Creates a new Calculator. Parameters: Name Type Description Default configuration Configuration for the crc algorithm. required optimized bool whether a register optimized for speed shall be used. False :attention: initializing an optimized calculator might take some extra time, calculation itself will be faster though. checksum ( data ) Calculates the checksum for the given data. Parameters: Name Type Description Default data Union [ int , ByteString , BinaryIO , Iterable [ ByteString ]] which will be used as input for the checksum. required Returns: Type Description int Checksum for the given input data. verify ( data , expected ) Verifies that the checksum for the given data is the expected one. Parameters: Name Type Description Default data Union [ int , ByteString , BinaryIO , Iterable [ ByteString ]] which will be used as input for the checksum. required expected int checksum. required Returns: Type Description bool True if the expected checksum matches the actual checksum for the given data, otherwise False.","title":"Calculator"},{"location":"api/calculator/#calculator","text":"","title":"Calculator"},{"location":"api/calculator/#crc.Calculator.__init__","text":"Creates a new Calculator. Parameters: Name Type Description Default configuration Configuration for the crc algorithm. required optimized bool whether a register optimized for speed shall be used. False :attention: initializing an optimized calculator might take some extra time, calculation itself will be faster though.","title":"__init__()"},{"location":"api/calculator/#crc.Calculator.checksum","text":"Calculates the checksum for the given data. Parameters: Name Type Description Default data Union [ int , ByteString , BinaryIO , Iterable [ ByteString ]] which will be used as input for the checksum. required Returns: Type Description int Checksum for the given input data.","title":"checksum()"},{"location":"api/calculator/#crc.Calculator.verify","text":"Verifies that the checksum for the given data is the expected one. Parameters: Name Type Description Default data Union [ int , ByteString , BinaryIO , Iterable [ ByteString ]] which will be used as input for the checksum. required expected int checksum. required Returns: Type Description bool True if the expected checksum matches the actual checksum for the given data, otherwise False.","title":"verify()"},{"location":"api/configuration/","text":"Configuration A Configuration provides all settings necessary to determine the concrete implementation of a specific crc algorithm/register. Example Create a custom configuration from crc import Configuration saej1850 = Configuration ( width = 8 , polynomial = 0x1D , init_value = 0 , final_xor_value = 0 , reverse_input = False , reverse_output = False ) width : int class-attribute polynomial : int class-attribute init_value : int = 0 class-attribute final_xor_value : int = 0 class-attribute reverse_input : bool = False class-attribute reverse_output : bool = False class-attribute","title":"Configuration"},{"location":"api/configuration/#configuration","text":"A Configuration provides all settings necessary to determine the concrete implementation of a specific crc algorithm/register. Example Create a custom configuration from crc import Configuration saej1850 = Configuration ( width = 8 , polynomial = 0x1D , init_value = 0 , final_xor_value = 0 , reverse_input = False , reverse_output = False )","title":"Configuration"},{"location":"api/configuration/#crc.Configuration.width","text":"","title":"width"},{"location":"api/configuration/#crc.Configuration.polynomial","text":"","title":"polynomial"},{"location":"api/configuration/#crc.Configuration.init_value","text":"","title":"init_value"},{"location":"api/configuration/#crc.Configuration.final_xor_value","text":"","title":"final_xor_value"},{"location":"api/configuration/#crc.Configuration.reverse_input","text":"","title":"reverse_input"},{"location":"api/configuration/#crc.Configuration.reverse_output","text":"","title":"reverse_output"},{"location":"api/crc16/","text":"Crc16 Available Configurations Bases: enum . Enum CCITT = Configuration ( width = 16 , polynomial = 4129 , init_value = 0 , final_xor_value = 0 , reverse_input = False , reverse_output = False ) class-attribute GSM = Configuration ( width = 16 , polynomial = 4129 , init_value = 0 , final_xor_value = 65535 , reverse_input = False , reverse_output = False ) class-attribute PROFIBUS = Configuration ( width = 16 , polynomial = 7631 , init_value = 65535 , final_xor_value = 65535 , reverse_input = False , reverse_output = False ) class-attribute","title":"Crc16"},{"location":"api/crc16/#crc16","text":"","title":"Crc16"},{"location":"api/crc16/#available-configurations","text":"Bases: enum . Enum","title":"Available Configurations"},{"location":"api/crc16/#crc.Crc16.CCITT","text":"","title":"CCITT"},{"location":"api/crc16/#crc.Crc16.GSM","text":"","title":"GSM"},{"location":"api/crc16/#crc.Crc16.PROFIBUS","text":"","title":"PROFIBUS"},{"location":"api/crc32/","text":"Crc32 Available Configurations Bases: enum . Enum CRC32 = Configuration ( width = 32 , polynomial = 79764919 , init_value = 4294967295 , final_xor_value = 4294967295 , reverse_input = True , reverse_output = True ) class-attribute AUTOSAR = Configuration ( width = 32 , polynomial = 4104977171 , init_value = 4294967295 , final_xor_value = 4294967295 , reverse_input = True , reverse_output = True ) class-attribute BZIP2 = Configuration ( width = 32 , polynomial = 79764919 , init_value = 4294967295 , final_xor_value = 4294967295 , reverse_input = False , reverse_output = False ) class-attribute POSIX = Configuration ( width = 32 , polynomial = 79764919 , init_value = 0 , final_xor_value = 4294967295 , reverse_input = False , reverse_output = False ) class-attribute","title":"Crc32"},{"location":"api/crc32/#crc32","text":"","title":"Crc32"},{"location":"api/crc32/#available-configurations","text":"Bases: enum . Enum","title":"Available Configurations"},{"location":"api/crc32/#crc.Crc32.CRC32","text":"","title":"CRC32"},{"location":"api/crc32/#crc.Crc32.AUTOSAR","text":"","title":"AUTOSAR"},{"location":"api/crc32/#crc.Crc32.BZIP2","text":"","title":"BZIP2"},{"location":"api/crc32/#crc.Crc32.POSIX","text":"","title":"POSIX"},{"location":"api/crc64/","text":"Crc64 Available Configurations Bases: enum . Enum CRC64 = Configuration ( width = 64 , polynomial = 4823603603198064275 , init_value = 0 , final_xor_value = 0 , reverse_input = False , reverse_output = False ) class-attribute","title":"Crc64"},{"location":"api/crc64/#crc64","text":"","title":"Crc64"},{"location":"api/crc64/#available-configurations","text":"Bases: enum . Enum","title":"Available Configurations"},{"location":"api/crc64/#crc.Crc64.CRC64","text":"","title":"CRC64"},{"location":"api/crc8/","text":"Crc8 Available Configurations Bases: enum . Enum CCITT = Configuration ( width = 8 , polynomial = 7 , init_value = 0 , final_xor_value = 0 , reverse_input = False , reverse_output = False ) class-attribute AUTOSAR = Configuration ( width = 8 , polynomial = 47 , init_value = 255 , final_xor_value = 255 , reverse_input = False , reverse_output = False ) class-attribute BLUETOOTH = Configuration ( width = 8 , polynomial = 167 , init_value = 0 , final_xor_value = 0 , reverse_input = True , reverse_output = True ) class-attribute SAEJ1850 = Configuration ( width = 8 , polynomial = 29 , init_value = 0 , final_xor_value = 0 , reverse_input = False , reverse_output = False ) class-attribute MAXIM_DOW = Configuration ( width = 8 , polynomial = 49 , init_value = 0 , final_xor_value = 0 , reverse_input = True , reverse_output = True ) class-attribute","title":"Crc8"},{"location":"api/crc8/#crc8","text":"","title":"Crc8"},{"location":"api/crc8/#available-configurations","text":"Bases: enum . Enum","title":"Available Configurations"},{"location":"api/crc8/#crc.Crc8.CCITT","text":"","title":"CCITT"},{"location":"api/crc8/#crc.Crc8.AUTOSAR","text":"","title":"AUTOSAR"},{"location":"api/crc8/#crc.Crc8.BLUETOOTH","text":"","title":"BLUETOOTH"},{"location":"api/crc8/#crc.Crc8.SAEJ1850","text":"","title":"SAEJ1850"},{"location":"api/crc8/#crc.Crc8.MAXIM_DOW","text":"","title":"MAXIM_DOW"},{"location":"api/register/","text":"Register Bases: BasicRegister Simple crc register, which will process one bit at the time. Note If performance is an important issue for the crc calculation use a table based register.","title":"Register"},{"location":"api/register/#register","text":"Bases: BasicRegister Simple crc register, which will process one bit at the time. Note If performance is an important issue for the crc calculation use a table based register.","title":"Register"},{"location":"api/table_based_register/","text":"TableBasedRegister Bases: BasicRegister Lookup table based crc register. Info this register type will be much faster than a simple bit by bit based crc register like Register . __init__ ( configuration ) Creates a new table based crc register. Parameters: Name Type Description Default configuration Configuration used for the crc algorithm. required Attention creating a table based register initially might take some extra time, due to the fact that some lookup tables need to be calculated/initialized .","title":"TableBasedRegister"},{"location":"api/table_based_register/#tablebasedregister","text":"Bases: BasicRegister Lookup table based crc register. Info this register type will be much faster than a simple bit by bit based crc register like Register .","title":"TableBasedRegister"},{"location":"api/table_based_register/#crc.TableBasedRegister.__init__","text":"Creates a new table based crc register. Parameters: Name Type Description Default configuration Configuration used for the crc algorithm. required Attention creating a table based register initially might take some extra time, due to the fact that some lookup tables need to be calculated/initialized .","title":"__init__()"},{"location":"changelog/changes_2.0.0/","text":"2.0.0 - 2022-11-27 \ud83d\udea8 Breaking API Changes Renamed Classes: AbstractCrcRegister -> AbstractRegister CrcRegisterBase -> BasicRegister CrcRegister -> Register TableBasedCrcRegister -> TableBasedRegister CrcCalculator -> Calculator Functions & Methods: CrcCalculator.calculate_checksum -> Calculator.checksum CrcCalculator.verify_checksum -> Calculator.verify [public] argument_parser() -> [private] _argument_parser() Arguments: CrcCalculator(configuration, table_based=False) -> Calculator(configuration, optimized=False) Removed Removed CRC_TYPES mapping Removed checksum function/cli-entry-point \ud83d\uddd1 Removed Removed checksum subcommand from CLI Removed CRC_TYPES mapping \u2728 Added Added typing support Added Documentation see here \ud83d\udd27 Refactorings Fixed various linter warnings","title":"2.0.0 - 2022-11-27"},{"location":"changelog/changes_2.0.0/#200-2022-11-27","text":"","title":"2.0.0 - 2022-11-27"},{"location":"changelog/changes_2.0.0/#breaking-api-changes","text":"Renamed Classes: AbstractCrcRegister -> AbstractRegister CrcRegisterBase -> BasicRegister CrcRegister -> Register TableBasedCrcRegister -> TableBasedRegister CrcCalculator -> Calculator Functions & Methods: CrcCalculator.calculate_checksum -> Calculator.checksum CrcCalculator.verify_checksum -> Calculator.verify [public] argument_parser() -> [private] _argument_parser() Arguments: CrcCalculator(configuration, table_based=False) -> Calculator(configuration, optimized=False) Removed Removed CRC_TYPES mapping Removed checksum function/cli-entry-point","title":"\ud83d\udea8 Breaking API Changes"},{"location":"changelog/changes_2.0.0/#removed","text":"Removed checksum subcommand from CLI Removed CRC_TYPES mapping","title":"\ud83d\uddd1 Removed"},{"location":"changelog/changes_2.0.0/#added","text":"Added typing support Added Documentation see here","title":"\u2728 Added"},{"location":"changelog/changes_2.0.0/#refactorings","text":"Fixed various linter warnings","title":"\ud83d\udd27 Refactorings"},{"location":"changelog/changes_3.0.0/","text":"3.0.0 - 2022-12-04 \ud83d\udea8 Breaking API Changes Renamed Functions & Methods: Renamed keyword argument expected_checksum of method Calculator.verify to expected Old API New API def verify ( self , data : bytes , expected_checksum : int ) -> bool : ... def verify ( self , data : Union [ int , ByteString , BinaryIO , Iterable [ ByteString ]], expected : int ) -> bool : ... \ud83d\udc1b Fixes Fixed return type for all inputs of ByteString types \u2728 Added Added support for other data types than bytes to Calculator.checksum and Calculator.verify ( int , ByteString , BinaryIO , Iterable[ByteString] ) \ud83d\udcda Documentation Renamed \"Latest - Changes\" to \"Unreleased\" Added \"API\" section Added \"development\" section","title":"3.0.0 - 2022-12-04"},{"location":"changelog/changes_3.0.0/#300-2022-12-04","text":"","title":"3.0.0 - 2022-12-04"},{"location":"changelog/changes_3.0.0/#breaking-api-changes","text":"Renamed Functions & Methods: Renamed keyword argument expected_checksum of method Calculator.verify to expected Old API New API def verify ( self , data : bytes , expected_checksum : int ) -> bool : ... def verify ( self , data : Union [ int , ByteString , BinaryIO , Iterable [ ByteString ]], expected : int ) -> bool : ...","title":"\ud83d\udea8 Breaking API Changes"},{"location":"changelog/changes_3.0.0/#fixes","text":"Fixed return type for all inputs of ByteString types","title":"\ud83d\udc1b Fixes"},{"location":"changelog/changes_3.0.0/#added","text":"Added support for other data types than bytes to Calculator.checksum and Calculator.verify ( int , ByteString , BinaryIO , Iterable[ByteString] )","title":"\u2728 Added"},{"location":"changelog/changes_3.0.0/#documentation","text":"Renamed \"Latest - Changes\" to \"Unreleased\" Added \"API\" section Added \"development\" section","title":"\ud83d\udcda Documentation"},{"location":"changelog/changes_3.0.1/","text":"3.0.1 - 2022-12-18 \ud83d\udcda Documentation Fix code example in 3.0.0 changelog entry Fix code example in README #59 \ud83d\udd29 Internal Adjust release.workflow task Update dev dependencies","title":"3.0.1 - 2022-12-18"},{"location":"changelog/changes_3.0.1/#301-2022-12-18","text":"","title":"3.0.1 - 2022-12-18"},{"location":"changelog/changes_3.0.1/#documentation","text":"Fix code example in 3.0.0 changelog entry Fix code example in README #59","title":"\ud83d\udcda Documentation"},{"location":"changelog/changes_3.0.1/#internal","text":"Adjust release.workflow task Update dev dependencies","title":"\ud83d\udd29  Internal"},{"location":"changelog/changes_4.0.0/","text":"4.0.0 - 2022-12-18 \ud83d\udea8 Breaking Changes Remove Python 3.7 support \ud83d\udcda Documentation Update repository status badge Fix heading in 3.0.1 changelog \ud83d\udd29 Internal Remove nox support Add additional pypi metadata Fix CI/CD checks and tasks","title":"4.0.0 - 2022-12-18"},{"location":"changelog/changes_4.0.0/#400-2022-12-18","text":"","title":"4.0.0 - 2022-12-18"},{"location":"changelog/changes_4.0.0/#breaking-changes","text":"Remove Python 3.7 support","title":"\ud83d\udea8 Breaking Changes"},{"location":"changelog/changes_4.0.0/#documentation","text":"Update repository status badge Fix heading in 3.0.1 changelog","title":"\ud83d\udcda Documentation"},{"location":"changelog/changes_4.0.0/#internal","text":"Remove nox support Add additional pypi metadata Fix CI/CD checks and tasks","title":"\ud83d\udd29  Internal"},{"location":"changelog/unreleased/","text":"Unreleased \ud83d\udcda Documentation Update repository status badge in documentation \ud83d\udd29 Internal Remove custom python version classifiers from pyproject.toml","title":"Unreleased"},{"location":"changelog/unreleased/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/unreleased/#documentation","text":"Update repository status badge in documentation","title":"\ud83d\udcda Documentation"},{"location":"changelog/unreleased/#internal","text":"Remove custom python version classifiers from pyproject.toml","title":"\ud83d\udd29  Internal"},{"location":"development/release/","text":"Release Create a release using the GitHub release workflow Execute the release.workflow task and follow potential instructions. Example: invoke release.workflow -v 2.0.0","title":"Release"},{"location":"development/release/#release","text":"","title":"Release"},{"location":"development/release/#create-a-release-using-the-github-release-workflow","text":"Execute the release.workflow task and follow potential instructions. Example: invoke release.workflow -v 2.0.0","title":"Create a release using the GitHub release workflow"},{"location":"development/setup/","text":"Setup Requirements TL;DR poetry gh 1. Install Poetry Follow the poetry installation instructions . 2. Install gh Follow the gh installation instructions . 3. Checkout the project GitHub CLI SSH HTTPS gh repo clone Nicoretti/crc git clone git@github.com:Nicoretti/crc.git git clone https://github.com/Nicoretti/crc.git 4. Switch into the directory cd crc 5. The Poetry environment Make sure the poetry environment is setup properly and all dependencies are installed. Activate the Poetry shell poetry shell Install the project dependencies poetry install Run the init task In order to bootstrap the remaining parts of the workspace setup, just execute the following command: invoke init Note Follow potential instructions.","title":"Setup"},{"location":"development/setup/#setup","text":"","title":"Setup"},{"location":"development/setup/#requirements-tldr","text":"poetry gh","title":"Requirements TL;DR"},{"location":"development/setup/#1-install-poetry","text":"Follow the poetry installation instructions .","title":"1. Install Poetry"},{"location":"development/setup/#2-install-gh","text":"Follow the gh installation instructions .","title":"2. Install gh"},{"location":"development/setup/#3-checkout-the-project","text":"GitHub CLI SSH HTTPS gh repo clone Nicoretti/crc git clone git@github.com:Nicoretti/crc.git git clone https://github.com/Nicoretti/crc.git","title":"3. Checkout the project"},{"location":"development/setup/#4-switch-into-the-directory","text":"cd crc","title":"4. Switch into the directory"},{"location":"development/setup/#5-the-poetry-environment","text":"Make sure the poetry environment is setup properly and all dependencies are installed. Activate the Poetry shell poetry shell Install the project dependencies poetry install","title":"5. The Poetry environment"},{"location":"development/setup/#run-the-init-task","text":"In order to bootstrap the remaining parts of the workspace setup, just execute the following command: invoke init Note Follow potential instructions.","title":"Run the init task"}]}